#include <iostream>
#include <vector>
#include "GL/glew.h"
#include "GLFW/glfw3.h"



// Dear ImGui: standalone example application for GLFW + OpenGL 3, using programmable pipeline
// (GLFW is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan/Metal graphics context creation, etc.)
// If you are new to Dear ImGui, read documentation from the docs/ folder + read the top of imgui.cpp.
// Read online: https://github.com/ocornut/imgui/tree/master/docs

#include "imgui/imgui.h"
#include "imgui/imgui_impl_glfw.h"
#include "imgui/imgui_impl_opengl3.h"
#include <stdio.h>
#if defined(IMGUI_IMPL_OPENGL_ES2)
#include <GLES2/gl2.h>
#endif
#include "implot/implot.h"
#include "implot/implot_internal.h"

// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
#if defined(_MSC_VER) && (_MSC_VER >= 1900) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS)
#pragma comment(lib, "legacy_stdio_definitions")
#endif



#if 0
//##############################################
//idea for a sqrt axiis
#ifndef IMPLOT_NO_FORCE_INLINE
#ifdef _MSC_VER
#define IMPLOT_INLINE __forceinline
#elif defined(__GNUC__)
#define IMPLOT_INLINE inline __attribute__((__always_inline__))
#elif defined(__CLANG__)
#if __has_attribute(__always_inline__)
#define IMPLOT_INLINE inline __attribute__((__always_inline__))
#else
#define IMPLOT_INLINE inline
#endif
#else
#define IMPLOT_INLINE inline
#endif
#else
#define IMPLOT_INLINE inline
#endif


static inline float  ImSqrt(float x) { return sqrtf(x); }
static inline double ImSqrt(double x) { return sqrt(x); }

struct TransformerSqrt {
   TransformerSqrt(double pixMin, double pltMin, double pltMax, double m, double den) : Den(den), PltMin(pltMin), PltMax(pltMax), PixMin(pixMin), M(m) { }
   template <typename T> IMPLOT_INLINE float operator()(T p) const {
      p = p < 0.0 ? 0.0 : p;
      double t = ImSqrt(p / PltMin) / Den;
      p = ImLerp(PltMin, PltMax, (float)t);
      return (float)(PixMin + M * (p - PltMin));
   }
   double Den, PltMin, PltMax, PixMin, M;
};

//todo: change this function from doing log ticks to sqrt ticks
void AddTicksSquareRoot(const ImPlotRange& range, float pix, bool vertical, ImPlotTickCollection& ticks, ImPlotFormatter formatter, void* data) {
   if (range.Min <= 0 || range.Max <= 0)
      return;
   const int nMajor = vertical ? ImMax(2, (int)IM_ROUND(pix * 0.02f)) : ImMax(2, (int)IM_ROUND(pix * 0.01f));
   double log_min = ImLog10(range.Min);
   double log_max = ImLog10(range.Max);
   int exp_step = ImMax(1, (int)(log_max - log_min) / nMajor);
   int exp_min = (int)log_min;
   int exp_max = (int)log_max;
   if (exp_step != 1) {
      while (exp_step % 3 != 0)       exp_step++; // make step size multiple of three
      while (exp_min % exp_step != 0) exp_min--;  // decrease exp_min until exp_min + N * exp_step will be 0
   }
   for (int e = exp_min - exp_step; e < (exp_max + exp_step); e += exp_step) {
      double major1 = ImPow(10, (double)(e));
      double major2 = ImPow(10, (double)(e + 1));
      double interval = (major2 - major1) / 9;
      if (major1 >= (range.Min - DBL_EPSILON) && major1 <= (range.Max + DBL_EPSILON))
         ticks.Append(major1, true, true, formatter, data);
      for (int j = 0; j < exp_step; ++j) {
         major1 = ImPow(10, (double)(e + j));
         major2 = ImPow(10, (double)(e + j + 1));
         interval = (major2 - major1) / 9;
         for (int i = 1; i < (9 + (int)(j < (exp_step - 1))); ++i) {
            double minor = major1 + i * interval;
            if (minor >= (range.Min - DBL_EPSILON) && minor <= (range.Max + DBL_EPSILON))
               ticks.Append(minor, false, false, formatter, data);

         }
      }
   }
}

//#############################################
#endif

static void glfw_error_callback(int error, const char* description)
{
   fprintf(stderr, "Glfw Error %d: %s\n", error, description);
}


void addAWindow(bool& show_demo_window, bool& show_another_window, ImVec4 clear_color) {
   static float f = 0.0f;
   static int counter = 0;

   ImGui::Begin("Hello, world!");                          // Create a window called "Hello, world!" and append into it.

   ImGui::Text("This is some useful text.");               // Display some text (you can use a format strings too)
   ImGui::Checkbox("Demo Window", &show_demo_window);      // Edit bools storing our window open/close state
   ImGui::Checkbox("Another Window", &show_another_window);

   ImGui::SliderFloat("float", &f, 0.0f, 1.0f);            // Edit 1 float using a slider from 0.0f to 1.0f
   ImGui::ColorEdit3("clear color", (float*)&clear_color); // Edit 3 floats representing a color

   if (ImGui::Button("Button"))                            // Buttons return true when clicked (most widgets return true when edited/activated)
      counter++;
   ImGui::SameLine();
   ImGui::Text("counter = %d", counter);

   ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
   ImGui::End();

}



//for my legend popup
static float  frequency = 0.1f;
static float  amplitude = 0.5f;
static ImVec4 colour = ImVec4(1, 0, 1, 1);
static bool   line = true;
static float  thickness = 1;
static bool   markers = false;

void MakeMainMenuBar(GLFWwindow* window) {
   if (ImGui::BeginMainMenuBar())
   {
      if (ImGui::BeginMenu("File"))
      {
         if (ImGui::MenuItem("Open...")) { std::cout << "This is where you call native file dialog to get a file." << std::endl; }
         if (ImGui::MenuItem("Save")) { std::cout << "do something with the menu item." << std::endl; }
         ImGui::Separator();
         if (ImGui::MenuItem("Close")) { glfwSetWindowShouldClose(window, true); }
         ImGui::EndMenu();
      }
      if (ImGui::BeginMenu("Edit"))
      {
         if (ImGui::MenuItem("Cut")) { std::cout << "Something got cut." << std::endl; }
         if (ImGui::MenuItem("Copy")) { std::cout << "Something got copied."; }
         if (ImGui::MenuItem("Paste")) { std::cout << "PASTE!" << std::endl; }
         ImGui::EndMenu();
      }
      ImGui::Separator();
      if (ImGui::Button("Save")) { std::cout << "Then save something!" << std::endl; }


      ImGui::EndMainMenuBar();
   }
}


int main(int, char**)
{
   //create some data to plot
   double* x_values = new double[1767] { 4.03,4.09,4.15,4.21,4.27,4.33,4.39,4.45,4.51,4.57,4.63,4.69,4.75,4.81,4.87,4.93,4.99,5.05,5.11,5.17,5.23,5.29,5.35,5.41,5.47,5.53,5.59,5.65,5.71,5.77,5.83,5.89,5.95,6.01,6.07,6.13,6.19,6.25,6.31,6.37,6.43,6.49,6.55,6.61,6.67,6.73,6.79,6.85,6.91,6.97,7.03,7.09,7.15,7.21,7.27,7.33,7.39,7.45,7.51,7.57,7.63,7.69,7.75,7.81,7.87,7.93,7.99,8.05,8.11,8.17,8.23,8.29,8.35,8.41,8.47,8.53,8.59,8.65,8.71,8.77,8.83,8.89,8.95,9.01,9.07,9.13,9.19,9.25,9.31,9.37,9.43,9.49,9.55,9.61,9.67,9.73,9.79,9.85,9.91,9.97,10.03,10.09,10.15,10.21,10.27,10.33,10.39,10.45,10.51,10.57,10.63,10.69,10.75,10.81,10.87,10.93,10.99,11.05,11.11,11.17,11.23,11.29,11.35,11.41,11.47,11.53,11.59,11.65,11.71,11.77,11.83,11.89,11.95,12.01,12.07,12.13,12.19,12.25,12.31,12.37,12.43,12.49,12.55,12.61,12.67,12.73,12.79,12.85,12.91,12.97,13.03,13.09,13.15,13.21,13.27,13.33,13.39,13.45,13.51,13.57,13.63,13.69,13.75,13.81,13.87,13.93,13.99,14.05,14.11,14.17,14.23,14.29,14.35,14.41,14.47,14.53,14.59,14.65,14.71,14.77,14.83,14.89,14.95,15.01,15.07,15.13,15.19,15.25,15.31,15.37,15.43,15.49,15.55,15.61,15.67,15.73,15.79,15.85,15.91,15.97,16.03,16.09,16.15,16.21,16.27,16.33,16.39,16.45,16.51,16.57,16.63,16.69,16.75,16.81,16.87,16.93,16.99,17.05,17.11,17.17,17.23,17.29,17.35,17.41,17.47,17.53,17.59,17.65,17.71,17.77,17.83,17.89,17.95,18.01,18.07,18.13,18.19,18.25,18.31,18.37,18.43,18.49,18.55,18.61,18.67,18.73,18.79,18.85,18.91,18.97,19.03,19.09,19.15,19.21,19.27,19.33,19.39,19.45,19.51,19.57,19.63,19.69,19.75,19.81,19.87,19.93,19.99,20.05,20.11,20.17,20.23,20.29,20.35,20.41,20.47,20.53,20.59,20.65,20.71,20.77,20.83,20.89,20.95,21.01,21.07,21.13,21.19,21.25,21.31,21.37,21.43,21.49,21.55,21.61,21.67,21.73,21.79,21.85,21.91,21.97,22.03,22.09,22.15,22.21,22.27,22.33,22.39,22.45,22.51,22.57,22.63,22.69,22.75,22.81,22.87,22.93,22.99,23.05,23.11,23.17,23.23,23.29,23.35,23.41,23.47,23.53,23.59,23.65,23.71,23.77,23.83,23.89,23.95,24.01,24.07,24.13,24.19,24.25,24.31,24.37,24.43,24.49,24.55,24.61,24.67,24.73,24.79,24.85,24.91,24.97,25.03,25.09,25.15,25.21,25.27,25.33,25.39,25.45,25.51,25.57,25.63,25.69,25.75,25.81,25.87,25.93,25.99,26.05,26.11,26.17,26.23,26.29,26.35,26.41,26.47,26.53,26.59,26.65,26.71,26.77,26.83,26.89,26.95,27.01,27.07,27.13,27.19,27.25,27.31,27.37,27.43,27.49,27.55,27.61,27.67,27.73,27.79,27.85,27.91,27.97,28.03,28.09,28.15,28.21,28.27,28.33,28.39,28.45,28.51,28.57,28.63,28.69,28.75,28.81,28.87,28.93,28.99,29.05,29.11,29.17,29.23,29.29,29.35,29.41,29.47,29.53,29.59,29.65,29.71,29.77,29.83,29.89,29.95,30.01,30.07,30.13,30.19,30.25,30.31,30.37,30.43,30.49,30.55,30.61,30.67,30.73,30.79,30.85,30.91,30.97,31.03,31.09,31.15,31.21,31.27,31.33,31.39,31.45,31.51,31.57,31.63,31.69,31.75,31.81,31.87,31.93,31.99,32.05,32.11,32.17,32.23,32.29,32.35,32.41,32.47,32.53,32.59,32.65,32.71,32.77,32.83,32.89,32.95,33.01,33.07,33.13,33.19,33.25,33.31,33.37,33.43,33.49,33.55,33.61,33.67,33.73,33.79,33.85,33.91,33.97,34.03,34.09,34.15,34.21,34.27,34.33,34.39,34.45,34.51,34.57,34.63,34.69,34.75,34.81,34.87,34.93,34.99,35.05,35.11,35.17,35.23,35.29,35.35,35.41,35.47,35.53,35.59,35.65,35.71,35.77,35.83,35.89,35.95,36.01,36.07,36.13,36.19,36.25,36.31,36.37,36.43,36.49,36.55,36.61,36.67,36.73,36.79,36.85,36.91,36.97,37.03,37.09,37.15,37.21,37.27,37.33,37.39,37.45,37.51,37.57,37.63,37.69,37.75,37.81,37.87,37.93,37.99,38.05,38.11,38.17,38.23,38.29,38.35,38.41,38.47,38.53,38.59,38.65,38.71,38.77,38.83,38.89,38.95,39.01,39.07,39.13,39.19,39.25,39.31,39.37,39.43,39.49,39.55,39.61,39.67,39.73,39.79,39.85,39.91,39.97,40.03,40.09,40.15,40.21,40.27,40.33,40.39,40.45,40.51,40.57,40.63,40.69,40.75,40.81,40.87,40.93,40.99,41.05,41.11,41.17,41.23,41.29,41.35,41.41,41.47,41.53,41.59,41.65,41.71,41.77,41.83,41.89,41.95,42.01,42.07,42.13,42.19,42.25,42.31,42.37,42.43,42.49,42.55,42.61,42.67,42.73,42.79,42.85,42.91,42.97,43.03,43.09,43.15,43.21,43.27,43.33,43.39,43.45,43.51,43.57,43.63,43.69,43.75,43.81,43.87,43.93,43.99,44.05,44.11,44.17,44.23,44.29,44.35,44.41,44.47,44.53,44.59,44.65,44.71,44.77,44.83,44.89,44.95,45.01,45.07,45.13,45.19,45.25,45.31,45.37,45.43,45.49,45.55,45.61,45.67,45.73,45.79,45.85,45.91,45.97,46.03,46.09,46.15,46.21,46.27,46.33,46.39,46.45,46.51,46.57,46.63,46.69,46.75,46.81,46.87,46.93,46.99,47.05,47.11,47.17,47.23,47.29,47.35,47.41,47.47,47.53,47.59,47.65,47.71,47.77,47.83,47.89,47.95,48.01,48.07,48.13,48.19,48.25,48.31,48.37,48.43,48.49,48.55,48.61,48.67,48.73,48.79,48.85,48.91,48.97,49.03,49.09,49.15,49.21,49.27,49.33,49.39,49.45,49.51,49.57,49.63,49.69,49.75,49.81,49.87,49.93,49.99,50.05,50.11,50.17,50.23,50.29,50.35,50.41,50.47,50.53,50.59,50.65,50.71,50.77,50.83,50.89,50.95,51.01,51.07,51.13,51.19,51.25,51.31,51.37,51.43,51.49,51.55,51.61,51.67,51.73,51.79,51.85,51.91,51.97,52.03,52.09,52.15,52.21,52.27,52.33,52.39,52.45,52.51,52.57,52.63,52.69,52.75,52.81,52.87,52.93,52.99,53.05,53.11,53.17,53.23,53.29,53.35,53.41,53.47,53.53,53.59,53.65,53.71,53.77,53.83,53.89,53.95,54.01,54.07,54.13,54.19,54.25,54.31,54.37,54.43,54.49,54.55,54.61,54.67,54.73,54.79,54.85,54.91,54.97,55.03,55.09,55.15,55.21,55.27,55.33,55.39,55.45,55.51,55.57,55.63,55.69,55.75,55.81,55.87,55.93,55.99,56.05,56.11,56.17,56.23,56.29,56.35,56.41,56.47,56.53,56.59,56.65,56.71,56.77,56.83,56.89,56.95,57.01,57.07,57.13,57.19,57.25,57.31,57.37,57.43,57.49,57.55,57.61,57.67,57.73,57.79,57.85,57.91,57.97,58.03,58.09,58.15,58.21,58.27,58.33,58.39,58.45,58.51,58.57,58.63,58.69,58.75,58.81,58.87,58.93,58.99,59.05,59.11,59.17,59.23,59.29,59.35,59.41,59.47,59.53,59.59,59.65,59.71,59.77,59.83,59.89,59.95,60.01,60.07,60.13,60.19,60.25,60.31,60.37,60.43,60.49,60.55,60.61,60.67,60.73,60.79,60.85,60.91,60.97,61.03,61.09,61.15,61.21,61.27,61.33,61.39,61.45,61.51,61.57,61.63,61.69,61.75,61.81,61.87,61.93,61.99,62.05,62.11,62.17,62.23,62.29,62.35,62.41,62.47,62.53,62.59,62.65,62.71,62.77,62.83,62.89,62.95,63.01,63.07,63.13,63.19,63.25,63.31,63.37,63.43,63.49,63.55,63.61,63.67,63.73,63.79,63.85,63.91,63.97,64.03,64.09,64.15,64.21,64.27,64.33,64.39,64.45,64.51,64.57,64.63,64.69,64.75,64.81,64.87,64.93,64.99,65.05,65.11,65.17,65.23,65.29,65.35,65.41,65.47,65.53,65.59,65.65,65.71,65.77,65.83,65.89,65.95,66.01,66.07,66.13,66.19,66.25,66.31,66.37,66.43,66.49,66.55,66.61,66.67,66.73,66.79,66.85,66.91,66.97,67.03,67.09,67.15,67.21,67.27,67.33,67.39,67.45,67.51,67.57,67.63,67.69,67.75,67.81,67.87,67.93,67.99,68.05,68.11,68.17,68.23,68.29,68.35,68.41,68.47,68.53,68.59,68.65,68.71,68.77,68.83,68.89,68.95,69.01,69.07,69.13,69.19,69.25,69.31,69.37,69.43,69.49,69.55,69.61,69.67,69.73,69.79,69.85,69.91,69.97,70.03,70.09,70.15,70.21,70.27,70.33,70.39,70.45,70.51,70.57,70.63,70.69,70.75,70.81,70.87,70.93,70.99,71.05,71.11,71.17,71.23,71.29,71.35,71.41,71.47,71.53,71.59,71.65,71.71,71.77,71.83,71.89,71.95,72.01,72.07,72.13,72.19,72.25,72.31,72.37,72.43,72.49,72.55,72.61,72.67,72.73,72.79,72.85,72.91,72.97,73.03,73.09,73.15,73.21,73.27,73.33,73.39,73.45,73.51,73.57,73.63,73.69,73.75,73.81,73.87,73.93,73.99,74.05,74.11,74.17,74.23,74.29,74.35,74.41,74.47,74.53,74.59,74.65,74.71,74.77,74.83,74.89,74.95,75.01,75.07,75.13,75.19,75.25,75.31,75.37,75.43,75.49,75.55,75.61,75.67,75.73,75.79,75.85,75.91,75.97,76.03,76.09,76.15,76.21,76.27,76.33,76.39,76.45,76.51,76.57,76.63,76.69,76.75,76.81,76.87,76.93,76.99,77.05,77.11,77.17,77.23,77.29,77.35,77.41,77.47,77.53,77.59,77.65,77.71,77.77,77.83,77.89,77.95,78.01,78.07,78.13,78.19,78.25,78.31,78.37,78.43,78.49,78.55,78.61,78.67,78.73,78.79,78.85,78.91,78.97,79.03,79.09,79.15,79.21,79.27,79.33,79.39,79.45,79.51,79.57,79.63,79.69,79.75,79.81,79.87,79.93,79.99,80.05,80.11,80.17,80.23,80.29,80.35,80.41,80.47,80.53,80.59,80.65,80.71,80.77,80.83,80.89,80.95,81.01,81.07,81.13,81.19,81.25,81.31,81.37,81.43,81.49,81.55,81.61,81.67,81.73,81.79,81.85,81.91,81.97,82.03,82.09,82.15,82.21,82.27,82.33,82.39,82.45,82.51,82.57,82.63,82.69,82.75,82.81,82.87,82.93,82.99,83.05,83.11,83.17,83.23,83.29,83.35,83.41,83.47,83.53,83.59,83.65,83.71,83.77,83.83,83.89,83.95,84.01,84.07,84.13,84.19,84.25,84.31,84.37,84.43,84.49,84.55,84.61,84.67,84.73,84.79,84.85,84.91,84.97,85.03,85.09,85.15,85.21,85.27,85.33,85.39,85.45,85.51,85.57,85.63,85.69,85.75,85.81,85.87,85.93,85.99,86.05,86.11,86.17,86.23,86.29,86.35,86.41,86.47,86.53,86.59,86.65,86.71,86.77,86.83,86.89,86.95,87.01,87.07,87.13,87.19,87.25,87.31,87.37,87.43,87.49,87.55,87.61,87.67,87.73,87.79,87.85,87.91,87.97,88.03,88.09,88.15,88.21,88.27,88.33,88.39,88.45,88.51,88.57,88.63,88.69,88.75,88.81,88.87,88.93,88.99,89.05,89.11,89.17,89.23,89.29,89.35,89.41,89.47,89.53,89.59,89.65,89.71,89.77,89.83,89.89,89.95,90.01,90.07,90.13,90.19,90.25,90.31,90.37,90.43,90.49,90.55,90.61,90.67,90.73,90.79,90.85,90.91,90.97,91.03,91.09,91.15,91.21,91.27,91.33,91.39,91.45,91.51,91.57,91.63,91.69,91.75,91.81,91.87,91.93,91.99,92.05,92.11,92.17,92.23,92.29,92.35,92.41,92.47,92.53,92.59,92.65,92.71,92.77,92.83,92.89,92.95,93.01,93.07,93.13,93.19,93.25,93.31,93.37,93.43,93.49,93.55,93.61,93.67,93.73,93.79,93.85,93.91,93.97,94.03,94.09,94.15,94.21,94.27,94.33,94.39,94.45,94.51,94.57,94.63,94.69,94.75,94.81,94.87,94.93,94.99,95.05,95.11,95.17,95.23,95.29,95.35,95.41,95.47,95.53,95.59,95.65,95.71,95.77,95.83,95.89,95.95,96.01,96.07,96.13,96.19,96.25,96.31,96.37,96.43,96.49,96.55,96.61,96.67,96.73,96.79,96.85,96.91,96.97,97.03,97.09,97.15,97.21,97.27,97.33,97.39,97.45,97.51,97.57,97.63,97.69,97.75,97.81,97.87,97.93,97.99,98.05,98.11,98.17,98.23,98.29,98.35,98.41,98.47,98.53,98.59,98.65,98.71,98.77,98.83,98.89,98.95,99.01,99.07,99.13,99.19,99.25,99.31,99.37,99.43,99.49,99.55,99.61,99.67,99.73,99.79,99.85,99.91,99.97,100.03,100.09,100.15,100.21,100.27,100.33,100.39,100.45,100.51,100.57,100.63,100.69,100.75,100.81,100.87,100.93,100.99,101.05,101.11,101.17,101.23,101.29,101.35,101.41,101.47,101.53,101.59,101.65,101.71,101.77,101.83,101.89,101.95,102.01,102.07,102.13,102.19,102.25,102.31,102.37,102.43,102.49,102.55,102.61,102.67,102.73,102.79,102.85,102.91,102.97,103.03,103.09,103.15,103.21,103.27,103.33,103.39,103.45,103.51,103.57,103.63,103.69,103.75,103.81,103.87,103.93,103.99,104.05,104.11,104.17,104.23,104.29,104.35,104.41,104.47,104.53,104.59,104.65,104.71,104.77,104.83,104.89,104.95,105.01,105.07,105.13,105.19,105.25,105.31,105.37,105.43,105.49,105.55,105.61,105.67,105.73,105.79,105.85,105.91,105.97,106.03,106.09,106.15,106.21,106.27,106.33,106.39,106.45,106.51,106.57,106.63,106.69,106.75,106.81,106.87,106.93,106.99,107.05,107.11,107.17,107.23,107.29,107.35,107.41,107.47,107.53,107.59,107.65,107.71,107.77,107.83,107.89,107.95,108.01,108.07,108.13,108.19,108.25,108.31,108.37,108.43,108.49,108.55,108.61,108.67,108.73,108.79,108.85,108.91,108.97,109.03,109.09,109.15,109.21,109.27,109.33,109.39,109.45,109.51,109.57,109.63,109.69,109.75,109.81,109.87,109.93,109.99 };
   double* y_values = new double[1767] { 154.0,140.0,134.0,171.0,158.0,142.0,159.0,189.0,173.0,150.0,149.0,146.0,158.0,153.0,175.0,162.0,185.0,141.0,175.0,161.0,173.0,180.0,164.0,157.0,155.0,190.0,160.0,146.0,162.0,146.0,187.0,160.0,133.0,183.0,168.0,201.0,189.0,187.0,209.0,208.0,203.0,191.0,201.0,225.0,223.0,197.0,171.0,208.0,219.0,205.0,219.0,205.0,220.0,219.0,196.0,187.0,183.0,218.0,202.0,206.0,192.0,235.0,203.0,203.0,228.0,192.0,208.0,206.0,212.0,200.0,203.0,193.0,193.0,169.0,210.0,198.0,211.0,208.0,221.0,229.0,201.0,226.0,213.0,195.0,205.0,205.0,177.0,234.0,194.0,195.0,191.0,194.0,220.0,228.0,197.0,211.0,218.0,213.0,191.0,230.0,214.0,190.0,212.0,192.0,211.0,212.0,213.0,207.0,225.0,240.0,209.0,228.0,226.0,224.0,230.0,215.0,247.0,234.0,219.0,216.0,232.0,218.0,234.0,254.0,221.0,228.0,222.0,238.0,246.0,206.0,233.0,243.0,211.0,251.0,215.0,212.0,214.0,234.0,240.0,228.0,221.0,224.0,229.0,268.0,230.0,252.0,219.0,235.0,223.0,226.0,247.0,240.0,215.0,238.0,235.0,231.0,256.0,238.0,232.0,248.0,224.0,260.0,247.0,233.0,251.0,240.0,243.0,243.0,238.0,270.0,241.0,247.0,257.0,264.0,255.0,268.0,268.0,286.0,249.0,244.0,270.0,265.0,262.0,268.0,244.0,264.0,272.0,261.0,281.0,280.0,263.0,260.0,273.0,284.0,279.0,232.0,277.0,268.0,283.0,289.0,252.0,267.0,287.0,270.0,280.0,279.0,288.0,296.0,264.0,293.0,298.0,341.0,310.0,291.0,280.0,316.0,289.0,299.0,274.0,292.0,303.0,304.0,287.0,315.0,333.0,326.0,305.0,308.0,300.0,418.0,487.0,788.0,1403.0,2768.0,4345.0,4411.0,3021.0,1551.0,855.0,540.0,374.0,388.0,368.0,368.0,287.0,305.0,307.0,372.0,388.0,386.0,338.0,353.0,394.0,334.0,356.0,394.0,365.0,367.0,390.0,422.0,410.0,412.0,429.0,418.0,389.0,397.0,417.0,449.0,447.0,442.0,418.0,457.0,408.0,413.0,477.0,403.0,405.0,422.0,409.0,435.0,430.0,447.0,459.0,419.0,418.0,402.0,406.0,455.0,424.0,418.0,417.0,418.0,425.0,429.0,391.0,428.0,393.0,400.0,411.0,421.0,427.0,453.0,468.0,489.0,573.0,862.0,1572.0,3180.0,5381.0,6138.0,4739.0,2705.0,1237.0,734.0,528.0,477.0,417.0,413.0,404.0,387.0,395.0,375.0,357.0,353.0,408.0,366.0,381.0,375.0,368.0,338.0,380.0,367.0,377.0,364.0,380.0,401.0,395.0,442.0,497.0,528.0,563.0,487.0,445.0,395.0,362.0,361.0,359.0,419.0,375.0,380.0,338.0,352.0,367.0,360.0,334.0,333.0,331.0,352.0,337.0,335.0,322.0,332.0,342.0,382.0,318.0,345.0,358.0,342.0,337.0,344.0,334.0,351.0,321.0,337.0,316.0,331.0,347.0,328.0,310.0,322.0,311.0,314.0,314.0,343.0,296.0,308.0,324.0,289.0,324.0,299.0,317.0,311.0,307.0,306.0,309.0,288.0,284.0,280.0,294.0,287.0,264.0,309.0,270.0,306.0,266.0,296.0,295.0,295.0,314.0,336.0,364.0,412.0,583.0,1213.0,3056.0,7211.0,11830.0,11681.0,7040.0,3002.0,1350.0,686.0,492.0,366.0,318.0,323.0,266.0,271.0,275.0,269.0,273.0,250.0,277.0,253.0,264.0,296.0,271.0,260.0,271.0,257.0,269.0,287.0,243.0,288.0,260.0,326.0,293.0,320.0,338.0,454.0,700.0,1242.0,1613.0,1620.0,1264.0,756.0,543.0,354.0,320.0,267.0,309.0,270.0,310.0,335.0,251.0,281.0,269.0,270.0,272.0,282.0,272.0,259.0,265.0,268.0,293.0,305.0,304.0,325.0,354.0,495.0,896.0,1938.0,3654.0,5318.0,5212.0,3273.0,1709.0,825.0,559.0,398.0,338.0,260.0,277.0,283.0,262.0,284.0,260.0,244.0,259.0,283.0,295.0,285.0,268.0,261.0,273.0,235.0,260.0,265.0,263.0,287.0,298.0,259.0,259.0,239.0,259.0,258.0,270.0,265.0,243.0,246.0,273.0,314.0,253.0,268.0,271.0,288.0,252.0,256.0,253.0,257.0,288.0,278.0,287.0,324.0,403.0,616.0,865.0,1096.0,1018.0,783.0,575.0,425.0,345.0,316.0,300.0,271.0,282.0,269.0,243.0,244.0,262.0,271.0,285.0,258.0,256.0,256.0,263.0,277.0,284.0,292.0,358.0,476.0,760.0,1020.0,1120.0,826.0,584.0,359.0,319.0,251.0,261.0,269.0,214.0,251.0,223.0,227.0,224.0,242.0,241.0,224.0,243.0,240.0,251.0,210.0,216.0,200.0,227.0,243.0,248.0,218.0,270.0,283.0,299.0,451.0,867.0,1733.0,3283.0,4432.0,4881.0,4857.0,4400.0,3308.0,1885.0,938.0,509.0,378.0,321.0,247.0,252.0,250.0,252.0,245.0,243.0,227.0,273.0,225.0,223.0,186.0,239.0,217.0,234.0,212.0,206.0,218.0,236.0,224.0,216.0,193.0,217.0,223.0,202.0,207.0,197.0,213.0,232.0,210.0,234.0,223.0,235.0,211.0,223.0,214.0,239.0,206.0,239.0,254.0,275.0,355.0,458.0,464.0,509.0,378.0,309.0,274.0,230.0,248.0,212.0,220.0,202.0,200.0,191.0,193.0,220.0,183.0,212.0,227.0,179.0,204.0,181.0,198.0,198.0,189.0,189.0,195.0,177.0,216.0,203.0,205.0,201.0,186.0,188.0,199.0,182.0,211.0,190.0,185.0,171.0,193.0,215.0,202.0,207.0,240.0,255.0,339.0,443.0,487.0,520.0,418.0,358.0,277.0,271.0,230.0,194.0,208.0,212.0,186.0,216.0,195.0,154.0,178.0,216.0,199.0,177.0,164.0,191.0,189.0,171.0,187.0,198.0,191.0,218.0,183.0,210.0,195.0,188.0,208.0,190.0,186.0,205.0,210.0,205.0,185.0,191.0,201.0,181.0,188.0,173.0,186.0,187.0,176.0,187.0,194.0,186.0,191.0,192.0,169.0,194.0,181.0,188.0,179.0,195.0,195.0,196.0,177.0,176.0,210.0,194.0,199.0,216.0,219.0,256.0,330.0,391.0,381.0,381.0,361.0,290.0,227.0,203.0,211.0,215.0,199.0,198.0,217.0,254.0,245.0,235.0,261.0,243.0,232.0,201.0,219.0,244.0,273.0,351.0,516.0,578.0,576.0,492.0,354.0,259.0,241.0,210.0,225.0,231.0,219.0,231.0,194.0,191.0,173.0,194.0,184.0,190.0,186.0,202.0,186.0,196.0,197.0,188.0,188.0,197.0,203.0,186.0,214.0,294.0,330.0,376.0,384.0,325.0,270.0,219.0,175.0,200.0,184.0,165.0,169.0,168.0,182.0,198.0,188.0,206.0,204.0,189.0,184.0,200.0,207.0,211.0,179.0,165.0,158.0,180.0,175.0,204.0,190.0,189.0,167.0,171.0,171.0,180.0,182.0,200.0,189.0,197.0,156.0,165.0,150.0,189.0,180.0,179.0,159.0,190.0,160.0,205.0,183.0,210.0,189.0,187.0,182.0,223.0,234.0,333.0,471.0,513.0,566.0,544.0,459.0,354.0,240.0,210.0,189.0,205.0,172.0,192.0,177.0,181.0,176.0,199.0,190.0,167.0,189.0,194.0,193.0,183.0,161.0,177.0,187.0,193.0,181.0,193.0,167.0,174.0,200.0,197.0,225.0,302.0,383.0,441.0,470.0,425.0,467.0,452.0,441.0,362.0,332.0,275.0,262.0,222.0,212.0,172.0,202.0,166.0,173.0,173.0,197.0,179.0,184.0,191.0,199.0,180.0,163.0,195.0,173.0,187.0,180.0,175.0,196.0,150.0,186.0,184.0,219.0,157.0,164.0,175.0,187.0,190.0,174.0,184.0,169.0,201.0,210.0,239.0,242.0,316.0,376.0,485.0,403.0,366.0,330.0,264.0,241.0,200.0,210.0,186.0,194.0,212.0,195.0,255.0,308.0,378.0,426.0,432.0,364.0,333.0,281.0,218.0,202.0,193.0,185.0,199.0,207.0,182.0,203.0,165.0,165.0,201.0,194.0,212.0,178.0,195.0,233.0,339.0,375.0,463.0,502.0,480.0,486.0,448.0,431.0,340.0,309.0,273.0,224.0,184.0,161.0,182.0,196.0,167.0,201.0,202.0,198.0,181.0,226.0,237.0,327.0,322.0,313.0,254.0,300.0,235.0,204.0,184.0,204.0,210.0,255.0,261.0,249.0,235.0,228.0,200.0,226.0,197.0,197.0,187.0,187.0,199.0,187.0,188.0,181.0,205.0,198.0,178.0,186.0,172.0,168.0,175.0,190.0,181.0,199.0,185.0,137.0,178.0,169.0,190.0,171.0,197.0,169.0,187.0,191.0,178.0,207.0,183.0,195.0,187.0,180.0,227.0,200.0,221.0,231.0,202.0,195.0,180.0,172.0,197.0,160.0,204.0,238.0,246.0,331.0,382.0,377.0,381.0,385.0,347.0,348.0,281.0,292.0,253.0,256.0,268.0,210.0,206.0,207.0,169.0,155.0,169.0,175.0,163.0,190.0,175.0,155.0,187.0,186.0,180.0,212.0,286.0,279.0,280.0,288.0,254.0,234.0,214.0,202.0,211.0,183.0,159.0,180.0,189.0,188.0,182.0,223.0,261.0,322.0,320.0,289.0,302.0,249.0,230.0,217.0,201.0,160.0,178.0,159.0,165.0,181.0,169.0,204.0,175.0,189.0,177.0,181.0,181.0,170.0,169.0,158.0,143.0,175.0,164.0,176.0,148.0,163.0,163.0,168.0,173.0,160.0,163.0,175.0,159.0,165.0,148.0,154.0,155.0,175.0,159.0,157.0,155.0,156.0,147.0,175.0,168.0,174.0,156.0,171.0,161.0,171.0,187.0,200.0,229.0,261.0,248.0,240.0,211.0,204.0,181.0,202.0,211.0,223.0,230.0,199.0,207.0,220.0,202.0,171.0,158.0,165.0,191.0,150.0,160.0,180.0,143.0,152.0,177.0,178.0,138.0,178.0,141.0,159.0,179.0,184.0,173.0,181.0,168.0,164.0,163.0,168.0,159.0,154.0,183.0,164.0,140.0,145.0,176.0,159.0,169.0,156.0,185.0,182.0,179.0,168.0,137.0,145.0,178.0,153.0,149.0,162.0,142.0,161.0,166.0,208.0,245.0,263.0,279.0,258.0,247.0,225.0,218.0,240.0,182.0,170.0,163.0,165.0,153.0,178.0,178.0,192.0,154.0,168.0,156.0,174.0,177.0,154.0,152.0,148.0,141.0,134.0,177.0,160.0,160.0,158.0,157.0,147.0,154.0,174.0,145.0,179.0,159.0,136.0,158.0,129.0,126.0,144.0,157.0,164.0,146.0,157.0,146.0,154.0,170.0,160.0,139.0,158.0,183.0,198.0,194.0,222.0,200.0,172.0,191.0,187.0,187.0,164.0,158.0,159.0,146.0,155.0,149.0,151.0,151.0,138.0,145.0,129.0,147.0,128.0,152.0,144.0,185.0,142.0,145.0,165.0,126.0,144.0,133.0,124.0,140.0,143.0,152.0,133.0,123.0,149.0,143.0,140.0,136.0,119.0,133.0,122.0,150.0,150.0,119.0,130.0,156.0,143.0,144.0,146.0,127.0,152.0,133.0,137.0,134.0,122.0,154.0,147.0,133.0,143.0,143.0,145.0,128.0,123.0,128.0,144.0,132.0,164.0,180.0,182.0,197.0,195.0,170.0,157.0,163.0,174.0,160.0,173.0,132.0,185.0,169.0,157.0,185.0,167.0,150.0,177.0,168.0,179.0,163.0,141.0,139.0,153.0,149.0,153.0,115.0,128.0,120.0,140.0,130.0,140.0,142.0,155.0,140.0,153.0,134.0,134.0,116.0,135.0,138.0,127.0,125.0,155.0,133.0,138.0,136.0,153.0,129.0,125.0,134.0,133.0,191.0,121.0,165.0,157.0,180.0,175.0,210.0,218.0,225.0,214.0,199.0,226.0,212.0,191.0,193.0,160.0,169.0,146.0,146.0,121.0,156.0,126.0,145.0,147.0,134.0,140.0,155.0,149.0,128.0,121.0,145.0,116.0,126.0,149.0,136.0,131.0,161.0,150.0,128.0,138.0,129.0,148.0,143.0,141.0,135.0,152.0,147.0,125.0,140.0,169.0,145.0,136.0,136.0,126.0,120.0,142.0,139.0,154.0,134.0,147.0,162.0,132.0,119.0,136.0,156.0,139.0,130.0,142.0,128.0,156.0,151.0,131.0,123.0,129.0,131.0,135.0,173.0,139.0,135.0,151.0,138.0,120.0,136.0,128.0,133.0,129.0,135.0,145.0,135.0,156.0,142.0,139.0,140.0,131.0,125.0,153.0,139.0,161.0,141.0,139.0,155.0,152.0,176.0,213.0,202.0,218.0,220.0,193.0,204.0,195.0,157.0,189.0,147.0,149.0,138.0,136.0,132.0,149.0,155.0,149.0,130.0,151.0,157.0,136.0,154.0,141.0,169.0,137.0,168.0,154.0,134.0,149.0,141.0,177.0,143.0,151.0,185.0,149.0,161.0,202.0,178.0,172.0,166.0,174.0,159.0,174.0,167.0,148.0,148.0,148.0,158.0,140.0,156.0,158.0,156.0,137.0,158.0,183.0,208.0,251.0,260.0,241.0,208.0,203.0,211.0,220.0,211.0,223.0,166.0,170.0,140.0,177.0,145.0,160.0,151.0,186.0,180.0,175.0,154.0,168.0,164.0,152.0,146.0,147.0,148.0,154.0,147.0,156.0,154.0,145.0,164.0,162.0,156.0,171.0,181.0,165.0,182.0,175.0,144.0,144.0,153.0,165.0,136.0,127.0,133.0,156.0,159.0,139.0,165.0,170.0,145.0,155.0,181.0,154.0,154.0,142.0,151.0,169.0,142.0,152.0,157.0,174.0,169.0,139.0,146.0,152.0,145.0,164.0,153.0,151.0,145.0,161.0,165.0,160.0,138.0,152.0,138.0,164.0,161.0,143.0,151.0,158.0,168.0,132.0,147.0,160.0,135.0,147.0,131.0,150.0,155.0,148.0,135.0,150.0,127.0,136.0,151.0,162.0,160.0,145.0,134.0,108.0,136.0,136.0,142.0,134.0,126.0,144.0,164.0,170.0,159.0,181.0,173.0,160.0,192.0,182.0,186.0,168.0,168.0,146.0,153.0,172.0,151.0,172.0,165.0,143.0,145.0,183.0,140.0,150.0,143.0,147.0,137.0,126.0,139.0,189.0,140.0,157.0,132.0,147.0,156.0,171.0,151.0,169.0,173.0,148.0,170.0,162.0,180.0,187.0,176.0,183.0,132.0,150.0,142.0,128.0,153.0,155.0,159.0,184.0,174.0,161.0,162.0,174.0,154.0,202.0,152.0,136.0,131.0,141.0,131.0,165.0,144.0,160.0,126.0,146.0,144.0,129.0,142.0,153.0,134.0,137.0,136.0,159.0,148.0,155.0,149.0,155.0,150.0,154.0,171.0,164.0,166.0,152.0,142.0 };

   std::vector<int> x_vec = { 1,2,3,4,5 };
   std::vector<int> y_vec = { 10,3,4,7,2 };

   // Setup window
   glfwSetErrorCallback(glfw_error_callback);
   if (!glfwInit())
      return 1;

   // Decide GL+GLSL versions
#if defined(IMGUI_IMPL_OPENGL_ES2)
    // GL ES 2.0 + GLSL 100
   const char* glsl_version = "#version 100";
   glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
   glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
   glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
#elif defined(__APPLE__)
    // GL 3.2 + GLSL 150
   const char* glsl_version = "#version 150";
   glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
   glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
   glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);  // 3.2+ only
   glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);            // Required on Mac
#else
    // GL 3.0 + GLSL 130
   const char* glsl_version = "#version 130";
   glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
   glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
   //glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);  // 3.2+ only
   //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);            // 3.0+ only
#endif

    // Create window with graphics context
   GLFWwindow* window = glfwCreateWindow(1280, 720, "pdqCIFv", NULL, NULL);
   if (window == nullptr)
      return 1;
   glfwMakeContextCurrent(window);
   glfwSwapInterval(1); // Enable vsync

   // Setup Dear ImGui context
   IMGUI_CHECKVERSION();
   ImGui::CreateContext();
   ImPlot::CreateContext(); //and set up ImPlot
   ImGuiIO& io = ImGui::GetIO(); (void)io;
   io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;       // Enable Keyboard Controls
   io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;           // Enable Docking
   io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;         // Enable Multi-Viewport / Platform Windows
   //io.ConfigViewportsNoAutoMerge = true;
   //io.ConfigViewportsNoTaskBarIcon = true;
   
   // Setup Dear ImGui style
   //ImGui::StyleColorsDark();
   //ImGui::StyleColorsClassic();
   ImGui::StyleColorsLight();

   // When viewports are enabled we tweak WindowRounding/WindowBg so platform windows can look identical to regular ones.
   ImGuiStyle& style = ImGui::GetStyle();
   if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
   {
      style.WindowRounding = 0.0f;
      style.Colors[ImGuiCol_WindowBg].w = 1.0f;
   }

   // Setup Platform/Renderer backends
   ImGui_ImplGlfw_InitForOpenGL(window, true);
   ImGui_ImplOpenGL3_Init(glsl_version);

   // Load Fonts
   // - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
   // - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
   // - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
   // - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
   // - Read 'docs/FONTS.md' for more instructions and details.
   // - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
  // io.Fonts->AddFontDefault();
   io.Fonts->AddFontFromFileTTF("src/vendor/imgui/misc/fonts/Roboto-Medium.ttf", 16.0f);
   io.Fonts->AddFontFromFileTTF("src/vendor/imgui/misc/fonts/Cousine-Regular.ttf", 15.0f);
   io.Fonts->AddFontFromFileTTF("src/vendor/imgui/misc/fonts/DroidSans.ttf", 16.0f);
   io.Fonts->AddFontFromFileTTF("src/vendor/imgui/misc/fonts/ProggyTiny.ttf", 10.0f);
   //ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
   //IM_ASSERT(font != NULL);

   // Our state
   bool show_demo_window = true;
   bool show_another_window = false;
   ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);



   // Main loop
   while (!glfwWindowShouldClose(window))
   {
      // Poll and handle events (inputs, window resize, etc.)
      // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
      // - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
      // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
      // Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
      glfwPollEvents();

      // Start the Dear ImGui frame
      ImGui_ImplOpenGL3_NewFrame();
      ImGui_ImplGlfw_NewFrame();
      ImGui::NewFrame();
      ImGui::DockSpaceOverViewport(ImGui::GetMainViewport()); //makes the main window dockable with the child windows
      

      // 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
      if (show_demo_window)
         ImGui::ShowDemoWindow(&show_demo_window);

      // 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
      addAWindow(show_demo_window, show_another_window, clear_color);
      //{
      //   static float f = 0.0f;
      //   static int counter = 0;

      //   ImGui::Begin("Hello, world!");                          // Create a window called "Hello, world!" and append into it.

      //   ImGui::Text("This is some useful text.");               // Display some text (you can use a format strings too)
      //   ImGui::Checkbox("Demo Window", &show_demo_window);      // Edit bools storing our window open/close state
      //   ImGui::Checkbox("Another Window", &show_another_window);

      //   ImGui::SliderFloat("float", &f, 0.0f, 1.0f);            // Edit 1 float using a slider from 0.0f to 1.0f
      //   ImGui::ColorEdit3("clear color", (float*)&clear_color); // Edit 3 floats representing a color

      //   if (ImGui::Button("Button"))                            // Buttons return true when clicked (most widgets return true when edited/activated)
      //      counter++;
      //   ImGui::SameLine();
      //   ImGui::Text("counter = %d", counter);

      //   ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
      //   ImGui::End();
      //}

      // 3. Show another simple window.
      if (show_another_window)
      {
         ImGui::Begin("Another Window", &show_another_window);   // Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
         ImGui::Text("Hello from another window!");
         if (ImGui::Button("Close Me"))
            show_another_window = false;
         ImGui::End();
      }
      

      MakeMainMenuBar(window);






#if 1
      //ImPlot::ShowDemoWindow();
      ImGui::Begin("pdqCIFv");
      if (ImPlot::BeginPlot("Diffraction data", ImVec2(-1, -1), ImPlotFlags_AntiAliased)) {
         //for setup, see implot.h from line 544
         ImPlot::SetupAxes("X-axis label", "Y-axis label");
         ImPlot::SetupLegend(ImPlotLocation_NorthEast);
         ImPlot::SetupMouseText(ImPlotLocation_SouthEast);
         ImPlot::SetupFinish();
     
         if (markers) ImPlot::SetNextMarkerStyle(ImPlotMarker_Circle);
         ImPlot::SetNextLineStyle(colour, thickness);
         //ImPlot::PlotLine("Ian's sample", x_values, y_values, 1767);

         if(x_values && y_values)   ImPlot::PlotLine("Ian's sample", x_values, y_values, 1767);
          



         if (ImPlot::BeginLegendPopup("Right Click Me")) {
            ImGui::ColorEdit3("Colour", &colour.x);
            ImGui::SliderFloat("Thickness", &thickness, 0, 5);
            ImGui::Checkbox("Markers", &markers);
            ImPlot::EndLegendPopup();
         }
         ImPlot::EndPlot();
      }
      ImGui::End();
#endif


      // Rendering
      ImGui::Render();
      int display_w, display_h;
      glfwGetFramebufferSize(window, &display_w, &display_h);
      glViewport(0, 0, display_w, display_h);
      glClearColor(clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w);
      glClear(GL_COLOR_BUFFER_BIT);
      ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

      // Update and Render additional Platform Windows
      // (Platform functions may change the current OpenGL context, so we save/restore it to make it easier to paste this code elsewhere.
      //  For this specific demo app we could also call glfwMakeContextCurrent(window) directly)
      if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
      {
         GLFWwindow* backup_current_context = glfwGetCurrentContext();
         ImGui::UpdatePlatformWindows();
         ImGui::RenderPlatformWindowsDefault();
         glfwMakeContextCurrent(backup_current_context);
      }

      glfwSwapBuffers(window);
   }

   // Cleanup
   ImGui_ImplOpenGL3_Shutdown();
   ImGui_ImplGlfw_Shutdown();
   ImPlot::DestroyContext();
   ImGui::DestroyContext();

   delete[] x_values;
   delete[] y_values;

   glfwDestroyWindow(window);
   glfwTerminate();

   return 0;
}
